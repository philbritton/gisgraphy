<?xml version="1.0" encoding="UTF-8" ?>


<schema name="gisgraphy" version="1.1">
  
  <types>
   
    <fieldType name="string_casesensitive" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>


    <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>


    <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>



    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    
    <fieldType name="exact_string_ci" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
       <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled.
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.ISOLatin1AccentFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
		<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="false" expand="true"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.ISOLatin1AccentFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
		<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="false" expand="true"/>
      </analyzer>
    </fieldType>
    
       <fieldType name="textiso" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
		<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
		<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      </analyzer>
    </fieldType>
    
     <!-- A case insensitive text string -->
     <fieldType name="string" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
     <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
      </analyzer>
    </fieldType>
	
	
	<fieldType name="spell" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
		  <analyzer type="index">
		    <tokenizer class="solr.StandardTokenizerFactory"/>
		    <filter class="solr.StandardFilterFactory"/>
		  </analyzer>
		  <analyzer type="query">
		    <tokenizer class="solr.StandardTokenizerFactory"/>
		    <filter class="solr.StandardFilterFactory"/>
		  </analyzer>
	</fieldType>
	
	<fieldType name="nontokenizedspell" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
		  <analyzer type="index">
		    <tokenizer class="solr.StandardTokenizerFactory"/>
		    <filter class="solr.StandardFilterFactory"/>
		  </analyzer>
		  <analyzer type="query">
		    <tokenizer class="solr.StandardTokenizerFactory"/>
		    <filter class="solr.StandardFilterFactory"/>
		  </analyzer>
	</fieldType>
	


    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" omitNorms="true" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true" >
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.TrimFilterFactory" />
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>
    
      <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>

    
    <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" omitNorms="true" /> 
     <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d" omitNorms="true"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate" omitNorms="true"/>

   <!--
    A Geohash is a compact representation of a latitude longitude pair in a single field.
    See http://wiki.apache.org/solr/SpatialSearch
   -->
    <fieldtype name="geohash" class="solr.GeoHashField" omitNorms="true"/>

 </types>


 <fields>
   
  <!-- Medium --><field name="street_type" type="string" indexed="true" stored="true"/>
  <!-- Medium --><field name="is_in" type="text" indexed="true" stored="true"/>
  <!-- Medium --><field name="is_in_place" type="text" indexed="true" stored="true"/>
  <!-- Medium --><field name="is_in_adm" type="text" indexed="true" stored="true"/>
  <!-- Medium --><field name="is_in_zip" type="text" indexed="true" stored="true"/>
  <!-- Medium --><field name="fully_qualified_address" type="text" indexed="true" stored="true"/>
  <!-- Medium --><field name="one_way" type="boolean" indexed="false" stored="true"/>
  <!-- Medium --><field name="length" type="double" indexed="false" stored="true"/>
  <!-- Medium --><field name="openstreetmap_id" type="long" indexed="true" stored="true"/>
  <!--Medium  --><field name="city_population" type="integer" indexed="true" stored="false"/><!-- must be indexed for boost field -->
  <!-- Medium --><field name="house_numbers" type="exact_string_ci" indexed="false" stored="true" multiValued="true"/>
  
   <field name="feature_id" type="long" indexed="true" stored="true"/>
   <field name="location" type="location" indexed="true" stored="false"/>
   <dynamicField name="*_coordinate"  type="tdouble" indexed="true"  stored="false"/>
   
  <!--Short --><field name="name" type="text" indexed="true" stored="true"/>
  <!--not exported  --><field name="iso_name" type="textiso" indexed="true" stored="false"/><!-- iso for scoring : query 'andré' should place andré before 'andre' -->
  <!--Short  --><field name="fully_qualified_name" type="string_casesensitive" indexed="false" stored="true"/>

 <!-- Medium --><field name="country_flag_url" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="google_map_url" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="yahoo_map_url" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="openstreetmap_map_url" type="string" indexed="false" stored="true"/>
 
 <!-- Country specific fields -->
 <!-- Medium --><field name="continent" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="currency_name" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="currency_code" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="fips_code" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="isoalpha2_country_code" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="isoalpha3_country_code" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="postal_code_mask" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="postal_code_regex" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="phone_prefix" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="spoken_languages" type="string" indexed="false" stored="true" multiValued="true"/>
 <!-- Medium --><field name="tld" type="string" indexed="false" stored="true"/>
 <!-- Medium --><field name="capital_name" type="string" indexed="false" stored="true"/>
  <!-- Medium --><field name="area" type="double" indexed="false" stored="true"/>
 
  <!-- Country specific fields -->
  <!--Medium --><field name="level" type="integer" indexed="false" stored="true"/>
 
  <!--Short  --><field name="zipcode" type="exact_string_ci" indexed="true" stored="true"  multiValued="true"/>
  <!--Medium --><field name="name_ascii" type="text" indexed="false" stored="true"/>
  <!--Long  --><field name="name_alternate" type="text" indexed="false" stored="true" multiValued="true"/><!-- alternatename without lang to be retrieved independently from those with languages -->
  <!--Long  --><dynamicField name="name_alternate_*"  type="text"  indexed="false"  stored="true" multiValued="true"/><!--alternatenames with lang -->
  <!--Long  --><field name="all_name" type="text" indexed="true" stored="false" multiValued="true"></field><!-- the alternatename search field -->
  <!--Not exported  --><field name="iso_all_name" type="textiso" indexed="true" stored="false" multiValued="true"></field><!-- the not iso alternatename search field -->

  <!--Medium --><field name="elevation" type="integer" indexed="false" stored="true"/>
  <!--Medium --><field name="gtopo30" type="integer" indexed="false" stored="true"/>
  <!--Medium --><field name="timezone" type="string" indexed="false" stored="true"/>
  <!--Medium  --><field name="lat" type="double" indexed="false" stored="true"/>
  <!--Medium  --><field name="lng" type="double" indexed="false" stored="true"/>
   
  <!--Medium  --><field name="feature_class" type="string" indexed="true" stored="true"/>
  <!--Medium  --><field name="feature_code" type="string" indexed="true" stored="true"/>
  <!--Short  --><field name="placetype" type="string" indexed="true" stored="true"/><!-- this field is used for extended search, extended search is useful when we want to search across multiple boost fields with a typed -->

   
   
   
  <!--Medium  --><field name="population" type="integer" indexed="true" stored="true"/><!-- must be indexed for boost field -->
   
  <!--Short  --><field name="country_name" type="string" indexed="false" stored="true"/>
  <!--Full  --><field name="country_name_alternate" type="string" indexed="false" stored="true" multiValued="true"/><!-- alternatenames without lang to be retrieved independently from those with languages -->
  <!--Full  --><dynamicField name="country_name_alternate_*"  type="string"  indexed="true"  stored="true" multiValued="true"/><!-- no need to iso --><!--alternatenames with lang -->
  <!--Full  --><field name="all_country_name" type="text" indexed="true" stored="false" multiValued="true"/><!-- the country search field -->
  <!--Short  --><field name="country_code" type="string" indexed="true" stored="true"/>
   
  <!--Long  --><field name="adm1_name" type="string" indexed="false" stored="true"/>
  <!--Full  --><field name="adm1_name_alternate" type="string" indexed="false" stored="true" multiValued="true"/><!-- alternatename without lang to be retrieved independently from those with languages -->
  <!--Full  --><dynamicField name="adm1_name_alternate_*"  type="string"  indexed="false"  stored="true" multiValued="true"/><!-- no need to iso --><!--alternatenames with lang -->
  <!--Full  --><field name="all_adm1_name" type="text" indexed="true" stored="false" multiValued="true"/><!-- the adm1 search field -->
   
  <!--Long  --><field name="adm2_name" type="string" indexed="false" stored="true"/>
  <!--Full  --><field name="adm2_name_alternate" type="string" indexed="false" stored="true" multiValued="true"/><!-- alternatename without lang to be retrieved independently from those with languages -->
  <!--Full  --><dynamicField name="adm2_name_alternate_*"  type="string"  indexed="false"  stored="true" multiValued="true"/><!-- no need to iso --><!--the adm2 output fields with lang-->
  <!--Full  --><field name="all_adm2_name" type="text" indexed="true" stored="false" multiValued="true"/><!-- the adm2 search field -->
   
  <!--Long  --><field name="adm3_name" type="string_casesensitive" indexed="true" stored="true"/>
  <!--Long  --><field name="adm4_name" type="string_casesensitive" indexed="true" stored="true"/>
   
  <!--Long  --><field name="adm1_code" type="string" indexed="true" stored="true"/>
  <!--Long  --><field name="adm2_code" type="string" indexed="true" stored="true"/>
  <!--Long  --><field name="adm3_code" type="string" indexed="true" stored="true"/>
  <!--Long  --><field name="adm4_code" type="string" indexed="true" stored="true"/>
   
   
  <!--  --><field name="spell" type="string" indexed="true" stored="false"/>
  <field name="nontokenizedspell" type="nontokenizedspell" indexed="true" stored="false"/>
  <field name="altspell" type="spell" indexed="true" stored="false"/>
   
   
   <!-- spell -->
   <copyField source="name" dest="spell"/> 
   <copyField source="name" dest="nontokenizedspell"/> 
   <copyField source="name" dest="altspell"/> 
   
   <!-- fill the all_name field -->  
   <copyField source="name*" dest="all_name"/>
   <copyField source="zipcode" dest="all_name"/>
   <!--   <copyField source="alternate_name_*" dest="all_name"/> not needed -->
   
   <!-- fill the all_adm1_name field -->  
   <copyField source="adm1_name*" dest="all_adm1_name"/>
    
   <!-- fill the all_adm2_name field -->  
   <copyField source="adm2_name*" dest="all_adm2_name"/>
    
   <!-- fill the all_country_name field -->  
   <copyField source="country_name*" dest="all_country_name"/>
    
    
   
   <!-- fill the iso field -->
   <copyField source="all_name" dest="iso_all_name"/>
   <copyField source="name" dest="iso_name"/> 
   
 </fields>

 <!-- field to use to determine and enforce document uniqueness. -->
 <uniqueKey>feature_id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 
 <defaultSearchField>all_name</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="OR"/>
</schema>
